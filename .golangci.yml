# https://github.com/golangci/golangci-lint/blob/master/.golangci.example.yml
# https://gitee.com/okleaf/istio1/blob/master/.golangci.yml
run:
  # default concurrency is a available CPU number
  concurrency: 4
  # timeout for analysis, e.g. 30s, 5m, default is 1m
  deadline: 5m
  # which dirs to skip: they won't be analyzed;
  # can use regexp here: generated.*, regexp is applied on full path;
  # default value is empty list, but next dirs are always skipped independently
  # from this option's value:
  #   vendor$, third_party$, testdata$, examples$, Godeps$, builtin$
  skip-dirs:
    - genfiles$
    - vendor$
    - test/test-data
  # which files to skip: they will be analyzed, but issues from them
  # won't be reported. Default value is empty list, but there is
  # no need to include all autogenerated files, we confidently recognize
  # autogenerated files. If it's not please let us know.
  skip-files:
    - ".*\\.pb\\.go"
    - ".*\\.gen\\.go"

linters-settings:
  govet:
    check-shadowing: true
  nakedret:
    # Disallow any unnamed return statement
    max-func-lines: 0
  lll:
    # max line length, lines longer will be reported. Default is 120.
    # '\t' is counted as 1 character by default, and can be changed with the tab-width option
    line-length: 180
  cyclop:
    max-complexity: 20
  funlen:
    lines: 100
    statements: 50

  goimports:
    # put imports beginning with prefix after 3rd-party packages;
    # it's a comma-separated list of prefixes
    local-prefixes: github.com/golangci/golangci-lint

# To see a list of supported linters and which linters are enabled/disabled:
# https://golangci-lint.run/usage/linters/
linters:
  enable:
    - gosimple          # 静态分析，用来简化代码
    - goimports         # 包含 gofmt 的功能，且能检查无用的导入
    - revive            # 代替 golint
    - dupl              # 检查重复的代码
    - forcetypeassert   # 检查类型断言
    - gochecknoinits    # 检查是否存在初始化函数
#    - gochecknoglobals  # 检查是否存在全局变量
    - goconst           # 检查是否有重复的字符串应该替换成常量
#    - gomnd             # 检查是否存在魔术数字
    - goprintffuncname  # 检查 Print 替换成 Printf
    - ifshort           # 检查 if 语句是否可以用短句模式
    - importas          # 检查导入包的别名是否和包名一致
    - lll               # 检查代码一行长度是否超标
#    - nakedret          # 查找复杂函数中的是否存在裸返回
    - wastedassign      # 检查是否存在不必要的赋值
    - unconvert         # 检查是否存在不必要的类型转换
    - promlinter        # 检查普罗米修斯的指标命名是否规范
    - predeclared       # 检查是否有代码覆盖了预声明标识符
    - forbidigo         # 支持 nolint 注释方法
    - nolintlint        # 检查无效的 nolint 注释方法
    - misspell          # 检查注释中的单词是否拼写正确
    - wsl               # 增加可读性，添加空行
    - whitespace        # 增加可读性，添加空格
    - nlreturn          # 增加可读性，return 之前加一行
  enable-all: false
  disable:
    - scopelint         # Archived by the owner.
    - rowserrcheck      # SQL not used.
    - sqlclosecheck     # SQL not used.
    - wrapcheck         # COMBAK: 从外部返回的错误是否被正确的包装
    - nilerr            # COMBAK: err 不是 nil，但是返回 nil
    - exhaustive        # COMBAK: 检查枚举的值是否都有用
    - goerr113
  disable-all: false
  presets:
    - bugs
    - unused
    - complexity
    - error
  fast: false

issues:
  exclude-rules:
    # Exclude known linters from partially hard-vendored code,
    # which is impossible to exclude via "nolint" comments.
    - path: internal/pkg/xutil/hash.go
      text: "weak cryptographic primitive"
      linters:
        - gosec

# golangci.com configuration
# https://github.com/golangci/golangci/wiki/Configuration
service:
  # use the fixed version to not introduce new linters unexpectedly
  golangci-lint-version: 1.41.x
  prepare:
    - echo "here I can run custom commands, but no preparation needed for this repo"
